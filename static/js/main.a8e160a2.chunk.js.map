{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Chess","require","App","useState","chess","fen","setFen","setSelectedChesspiece","useEffect","console","log","handleMove","move","config","coordinates","turnColor","colors","addPieceZIndex","selectable","enabled","movable","dests","Map","SQUARES","forEach","s","ms","moves","square","verbose","length","set","map","m","to","free","showDests","events","after","from","metadeta","promotion","calcMovable","select","key","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAKMA,EAAQC,EAAQ,IAkFPC,MAhFf,WAAgB,IAAD,EACGC,mBACd,IAAIH,EAAM,6DADLI,EADM,sBAKSD,mBAASC,EAAMC,OALxB,mBAKNA,EALM,KAKDC,EALC,OAMuCH,qBANvC,mBAMcI,GANd,WAObC,qBAAU,WACRC,QAAQC,IAAIL,KACX,CAACA,IACJ,IAAMM,EAAa,SAACC,GACdR,EAAMQ,KAAKA,GAUfN,EAAOF,EAAMC,QAmCXQ,EAAS,CACXC,aAAa,EACbC,UAAWC,IAAO,GAClBC,gBAAgB,EAChBC,WAAY,CACVC,SAAS,GAEXC,QAxCkB,WAClB,IAAMC,EAAQ,IAAIC,IAmBlB,OAlBAlB,EAAMmB,QAAQC,SAAQ,SAACC,GACrB,IAAMC,EAAKtB,EAAMuB,MAAM,CAAEC,OAAQH,EAAGI,SAAS,IACzCH,EAAGI,QACLT,EAAMU,IACJN,EACAC,EAAGM,KAAI,SAACC,GAAD,OAAOA,EAAEC,UAGtBzB,QAAQC,IAAI,YAAa,CACvByB,MAAM,EACNd,MAAOA,EACPe,WAAW,EACXC,OAAQ,CACNC,MAAO,SAACC,EAAWL,EAASM,GAC1B,OAAO7B,EAAW,CAAE4B,KAAMA,EAAML,GAAIA,EAAIO,UAAW,UAIlD,CACLN,MAAM,EACNd,QACAe,WAAW,EACXC,OAAQ,CACNC,MAAO,SAACC,EAAWL,EAASM,GAE1B,OAAO7B,EAAW,CAAE4B,KAAMA,EAAML,GAAIA,EAAIO,UAAW,SAahDC,GACTL,OAAQ,CACNM,OAAQ,SAACC,GACPrC,EAAsBqC,MAK5B,OACE,qBAAKC,UAAU,MAAMC,GAAG,aAAxB,SACE,qBAAKD,UAAU,OAAf,SACE,cAAC,IAAD,CAAahC,OAAM,aAAIR,IAAKA,GAAQQ,UCnE7BkC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a8e160a2.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Chessground from \"@react-chess/chessground\";\nimport \"./App.css\";\nimport { ChessInstance, ShortMove } from \"chess.js\";\nimport { Key, Role, Dests, Color, colors } from \"chessground/types\";\nconst Chess = require(\"chess.js\");\ndeclare let window: any;\nfunction App() {\n  const [chess] = useState<ChessInstance>(\n    new Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\")\n  );\n\n  const [fen, setFen] = useState(chess.fen());\n  const [selectedChesspiece, setSelectedChesspiece] = useState<any>();\n  useEffect(() => {\n    console.log(fen);\n  }, [fen]);\n  const handleMove = (move: ShortMove) => {\n    if (chess.move(move)) {\n      // setTimeout(() => {\n      //   const moves = chess.moves();\n      //   if (moves.length > 0) {\n      //     const computerMove = moves[Math.floor(Math.random() * moves.length)];\n      //     chess.move(computerMove);\n      //     setFen(chess.fen());\n      //   }\n      // }, 300);\n    }\n    setFen(chess.fen());\n  };\n  const calcMovable = () => {\n    const dests = new Map();\n    chess.SQUARES.forEach((s) => {\n      const ms = chess.moves({ square: s, verbose: true });\n      if (ms.length)\n        dests.set(\n          s,\n          ms.map((m) => m.to)\n        );\n    });\n    console.log(\"movable: \", {\n      free: false,\n      dests: dests,\n      showDests: true,\n      events: {\n        after: (from: any, to: any, metadeta: any) => {\n          return handleMove({ from: from, to: to, promotion: \"q\" });\n        },\n      },\n    });\n    return {\n      free: false,\n      dests,\n      showDests: true,\n      events: {\n        after: (from: any, to: any, metadeta: any) => {\n          // console.log(\"MOVABLE: \", metadeta);\n          return handleMove({ from: from, to: to, promotion: \"q\" });\n        },\n      },\n    };\n  };\n\n  let config = {\n    coordinates: true,\n    turnColor: colors[0],\n    addPieceZIndex: true,\n    selectable: {\n      enabled: true,\n    },\n    movable: calcMovable(),\n    events: {\n      select: (key: Key) => {\n        setSelectedChesspiece(key);\n        // console.log(new Map(key, chess.moves({square: key})));\n      },\n    },\n  };\n  return (\n    <div className=\"App\" id=\"chessboard\">\n      <div className=\"main\">\n        <Chessground config={{ fen: fen, ...config }} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}